View(data)
print(c(1:4))
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('AD.young', 1:4),
paste0('AD.old', 5:7),
paste0('AD.old.j147', 8:11),
paste0('AD.cad31', 12:15),
paste0('AD', 16:18),
paste0('WT.CAD31', 19:21),
paste0('WT', 21:24)
)
print(length(1:24))
View(data)
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('gene')
paste0('AD.young', 1:4),
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('gene'),
paste0('AD.young', 1:4),
paste0('AD.old', 5:7),
paste0('AD.old.j147', 8:11),
paste0('AD.cad31', 12:15),
paste0('AD', 16:18),
paste0('WT.CAD31', 19:21),
paste0('WT', 21:24)
)
print(names(data))
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('gene'),
paste0('AD.old.j147', 2:4),
paste0('AD.old', 5:7),
paste0('AD.young', 8:11),
paste0('AD.cad31', 12:14),
paste0('AD', 15:17),
paste0('WT.CAD31', 18:21),
paste0('WT', 21:24)
)
print(names(data))
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('gene', 1),
paste0('AD.old.j147', 2:4),
paste0('AD.old', 5:7),
paste0('AD.young', 8:11),
paste0('AD.cad31', 12:14),
paste0('AD', 15:17),
paste0('WT.CAD31', 18:21),
paste0('WT', 21:24)
)
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('AD.old.j147', 2:4),
paste0('AD.old', 5:7),
paste0('AD.young', 8:11),
paste0('AD.cad31', 12:14),
paste0('AD', 15:17),
paste0('WT.CAD31', 18:21),
paste0('WT', 21:24)
)
print(names(data))
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('Gene'),
paste0('AD.old.j147.', 1:3),
paste0('AD.old.', 1:3),
paste0('AD.young.', 1:3),
paste0('AD.cad31.', 1:4),
paste0('AD.', 1:3),
paste0('WT.CAD31.', 1:3),
paste0('WT.', 1:3)
)
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('Gene'),
paste0('AD.old.j147.', 1:3),
paste0('AD.old.', 1:3),
paste0('AD.young.', 1:4),
paste0('AD.cad31.', 1:3),
paste0('AD.', 1:3),
paste0('WT.CAD31.', 1:3),
paste0('WT.', 1:4)
)
#load in the data using the read.table method
j147 <- read.table("./data/j147.csv", header = T, sep = ",")
cad31 <- read.table("./data/cad-31.txt", header = T, sep = "\t", fill = T)
#create a new column for te gene annotation
cad31$Gene <- strsplit(cad31$Annotation.Divergence, "|", 1)
#filter the gene annotation out of the string
counter <- 1
while( counter < length(cad31$Gene)) {
cad31$Gene[counter] <- cad31$Gene[[counter]][1]
counter <- counter + 1
}
#drop some unnecesary columns
cad31 <- cad31[c(22, 9:21)]
#merge all the data into one dataframe
data <- merge(j147, cad31)
#delete old dataframes
rm(cad31)
rm(j147)
#replace na's with zero's
data[is.na(data)] <- 0
#rename the columns
names(data) <- c(
paste0('Gene'),
paste0('AD.old.j147.', 1:3),
paste0('AD.old.', 1:3),
paste0('AD.young.', 1:4),
paste0('AD.cad31.', 1:3),
paste0('AD.', 1:3),
paste0('WT.CAD31.', 1:3),
paste0('WT.', 1:4)
)
#TODO: Check row names just to be sure
#set some indices to help future work
AD.old.j147 <- 2:4
AD.old <- 5:7
AD.young <- 8:11
AD.cad31 <- 12:14
AD <- 15:17
WT.CAD31 <- 18:20
WT <- 21:24
summary(data$AD.old.j147.1)
summary(data$AD.old.j147.1)
summary(data$AD.old.j147.2)
summary(data$AD.old.j147.1)
summary(data$AD.old.j147.2)
summary(data$AD.1)
summary(data$AD.old.j147.1)
summary(data$AD.old.j147.2)
summary(data$AD.1)
summary(data$AD.old.1)
help("summarise_at")
summarise_at(data, AD.old.j147)
help("summarise")
summarise(mean(data[AD.old.j147]))
mean(data[AD.old.j147])
data[AD.old.j147]
summary(colMeans(data[,AD.old.j147]))
summary(colMeans(data[AD.old.j147,]))
colMeans(data[,AD.old.j147])
newcolumn <- sum(data[AD.old.j147])/3
newcolumn <- sum(data[AD.old.j147])/3
newcolumn <- rowSums(data[AD.old.j147])
newcolumn <- rowSums(data[AD.old.j147])
summary(rowSums(data[AD.old.j147])/3)
rm(newcolumn)
newcolumn <- rowSums(data[AD.old.j147]/3)
summary(rowSums(data[AD.old.j147])/3)
#rm(newcolumn)
summary(rowSums(data[AD.old.j147])/3)
summary(rowSums(data[AD.old])/3)
summary(rowSums(data[AD.young])/4)
summary(rowSums(data[AD.cad31])/3)
summary(rowSums(data[AD])/3)
summary(rowSums(data[WT.CAD31])/3)
summary(rowSums(data[WT])/4)
summary(rowSums(data[AD.old.j147])/3)
summary(rowSums(data[AD.old])/3)
summary(rowSums(data[AD.young])/4)
summary(rowSums(data[AD.cad31])/3)
summary(rowSums(data[AD])/3)
summary(rowSums(data[WT.CAD31])/3)
summary(rowSums(data[WT])/4)
help("boxplot")
View(data)
data <- data + 1
data + 1
data + 1
data[2:24] + 1
boxplot(data = data, )
data <- data[2:24] + 1
View(data)
boxplot(data = log2(data) )
boxplot(log2(data) )
boxplot(log2(data),las=1, xlab = "sample mice",
ylab = "log2 raw gene count", cex=0.5)
boxplot(log2(data),las=1, xlab = "sample mice",
ylab = "log2 raw gene count", cex.lab=0.5)
help(par)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", cex.=0.5)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", cex=0.1)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", cex=1)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", ps=1)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", cex.axis=0.3)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", cex.axis=0.5)
View(data)
library(dplyr)
library(affy)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
library(dplyr)
library(affy)
library(dplyr)
library(affy)
library(scales)
View(data)
help("rep")
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(counts)),
col=rep(myColors, each=3))
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(counts)),
)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(counts)))
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(counts)),
col=rep(myColors,c(3,3,4,3,3,3,4)))
help(legend)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)))
abline(v=-1.5, lwd=1, col='red', lty=2)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.1)
abline(v=-1.5, lwd=1, col='red', lty=2)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.2)
abline(v=-1.5, lwd=1, col='red', lty=2)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.3)
abline(v=-1.5, lwd=1, col='red', lty=2)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.3)
abline(v=1, lwd=1, col='red', lty=2)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.3)
abline(v=1,5, lwd=1, col='red', lty=2)
myColors <- hue_pal()(7)
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.3)
abline(v=1.5, lwd=1, col='red', lty=2)
tinytex::install_tinytex()
update.packages("xfun")
barplot(colSums(data)/1000000)
barplot(colSums(data)/1000000, col=rep(myColors,c(3,3,4,3,3,3,4)))
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.axis = 0.3, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.axis = 0.1, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex = 0.1, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.sub= 0.3, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.lab= 0.3, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex= 0.3, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.3, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.4, las=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.5, las=2)
myColors <- hue_pal()(7)
boxplot(log2(data),las=2, xlab = "sample mice",
ylab = "log2 raw gene count", cex.axis=0.5,
col=rep(myColors,c(3,3,4,3,3,3,4)))
## Plot the log2-transformed data with a 0.1 pseudocount
plotDensity(log2(data + 0.1),
col=rep(myColors,c(3,3,4,3,3,3,4)),
lty=c(1:ncol(data)), xlab='Log2(count)',
main='Expression Distribution')
legend('topright', names(data), lty=c(1:ncol(data)),
col=rep(myColors,c(3,3,4,3,3,3,4)), cex = 0.3)
abline(v=1.5, lwd=1, col='red', lty=2)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.5, las=2)
help("abline")
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.5, las=2)
abline(h = min(colSums((data)/1000000)), col = "red")
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.5, las=2)
abline(h = min(colSums((data)/1000000)), col = "red",
type="l", lty=2, lwd=3)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.5, las=2)
abline(h = min(colSums((data)/1000000)), col = "red",
lty=2, lwd=3)
barplot(colSums(data)/1000000,    col=rep(myColors,c(3,3,4,3,3,3,4)),
xlab = "mouse samples", ylab = "number of reads in millions", cex.names= 0.5, las=2)
abline(h = min(colSums((data)/1000000)), col = "red",
lty=2, lwd=2)
